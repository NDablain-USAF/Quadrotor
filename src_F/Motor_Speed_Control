volatile uint8_t counter[2] = {0,0}; // Make it volatile so that it can be accessed anywhere and stored on RAM
const uint8_t ENC_PINS[2] = {2,3}; // Pins with interrupts, assume 3 is on channel A and 2 is on channel B
const uint8_t PWM_PIN = 5; // Pin for PWM output
const uint8_t BUTTON_PINS[2] = {11,12}; // Pins connected to pushbuttons
const uint8_t BUTTON_POWER_PIN = 13; // Pin for powering buttons

void setup() {
  Serial.begin(115200); 
  pinMode(BUTTON_PINS[0],INPUT_PULLUP);
  pinMode(BUTTON_PINS[1],INPUT_PULLUP);
  pinMode(BUTTON_POWER_PIN,OUTPUT);
  pinMode(PWM_PIN,OUTPUT); 
  pinMode(ENC_PINS[0],INPUT_PULLUP); 
  pinMode(ENC_PINS[1],INPUT_PULLUP);
  attachInterrupt(digitalPinToInterrupt(ENC_PINS[0]),revs1,CHANGE); // Will be 34 cpr per channel 
  attachInterrupt(digitalPinToInterrupt(ENC_PINS[1]),revs2,CHANGE);
}

void loop() {
  static uint32_t t[3]; // t[0]: controls time between reference value changes, t[1]: controls time between encoder reads for speed update, t[2]: used for lead compensator derivative calculation
  static double wm;
  static double wd;
  
  on_off(t, &wm); // Check for pushbutton actuation to start/stop motor

  performance(t, &wm, &wd); // Change reference value and update motor speed
  
  control(t, &wm, &wd); // Implement lead compensator to perform reference tracking
}

void on_off(uint32_t t[], double *wm){
  static uint8_t check;
  while(check==0){
    analogWrite(PWM_PIN,0);
    delay(1);
    if (digitalRead(BUTTON_PINS[1])==0){ // Begin
      t[0] = millis();
      t[1] = micros();
      t[2] = micros();
      ++check;
    }
  }
  if (digitalRead(BUTTON_PINS[0])==0){ // Reset
    *wm = 0;
    counter[0] = 0;
    counter[1] = 0;
    check = 0;
  }
}

void measure(uint32_t t[], double *wm){
  double c1 = 0.9; // Low pass filter constants
  double c2 = 1-c1;
  double count = counter[0]+counter[1];
  counter[0] = 0;
  counter[1] = 0;
  double dt = micros()-t[1];
  *wm = *wm*c1 + ((count/68)*(1e6/dt)*2*PI*c2); // Find the angular rate, 68 counts per revolution, 1e6/dt intervals per sec. Includes low pass filter 
  t[1] = micros(); // Reset for future interval 
}

void performance(uint32_t t[], double *wm, double *wd){
  static uint8_t index;
  uint16_t reference[5] = {1200,1000,1500,792,950}; // Initial setpoint from rest, target step speed (rad/s)
  *wd = reference[index]; // Desired motor speed (rad/s)

  uint16_t intervalRef = 1000; // How often reference value changes
  if ((millis()-t[0])>intervalRef){
    t[0] = millis();
    if (index<4){
      index++;
    }
    else {
      index = 0;
    }
  }
  
  uint8_t intervalCount = 34;

  if ((counter[0]+counter[1])>=intervalCount){
    measure(t, wm);
  }

  Serial.print(*wm);
  Serial.print(",");
  Serial.print(*wd);
  Serial.print(",");
}

void control(uint32_t t[], double *wm, double *wd){
  static double input;
  static double x; // Compensator input
  static double y; // Compensator output
  double k = 25; // Compensator gain
  double z = -375; // Zero of compensator (s domain)
  double p = -800; // Pole of compensator (s domain)
  double dt = (micros()-t[2])/1e6;
  if (dt>0.25){ // In case motor has been left idle for awhile, won't blow up derivative and integral
    dt = 0.25;
  }
  double e = *wd-*wm;
  double xdot = ((k*e)-x)/dt;
  x = k*e; 
  double ydot = xdot + (p*y) - (z*x); 
  y += (ydot*dt); // Rectangular rule integration
  t[2] = micros();
  input = constrain(y,0,255); // Constrain to range of pwm values
  analogWrite(PWM_PIN,input);
  Serial.println(input);
}

void revs1(){
  ++counter[0];
}

void revs2(){
  ++counter[1];
}
